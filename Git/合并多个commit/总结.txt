只进行了 'git add .' 和 'git commit' 操作

    ‘git log’ 查看提交记录，或者用 ‘git log --oneline’ 查看提交记录。

    ‘git rebase -i （start, end】’
        使用该语句意为要合并’start‘之后的（不包含start）， ‘end’之前的（包括end）的所有commits。
    如果使用‘git rebase -i start’ 意为合并‘start’（不包含start）的，到最近一次的所有commits。

        提交该语句后，会进入到编辑命令行。

        将最近一次commit之前所有的commits前的 ‘pick’修改为’s‘，意为’squash‘，使用提交，但合并到之前的提交中.保存退出后，将进入到第二次的vim编写中，将之前的提交信息，删除，编辑新的提交信息后，保存，退出。
        也可以将’pick‘改为’f‘， 意为’fixup‘，与’squash‘的功能一样，但是不会进入到第二次的vim编写中，会直接使用第一次（即最先前的commit提交信息）。





进行了push操作后的多个commits合并
    前置操作一样，但是最后重push的时候，需要使用’git push -f‘强制推送。
    

如果在合并中存在着他人的合并主干，要把主干分支上的代码拉到分支上，进行合并。
    如果在已有一次push后，发现本分支落后于主干分支，则需要切本地主干分支进行一次拉取，
    在拉取后，回到修改分支，git pull origin master 拉取一下，如有冲突，可以采用git merge master解决冲突，
    然后再按照流程进行提交，但是最后必须是git push -f 强制推上。

    也可以先将本地修改暂存后，在git pull 拉取，然后再恢复暂存内容。

    