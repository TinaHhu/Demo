请求配置

这些是创建请求时可以用的配置选项。只有url是必需的。如果没有指定method，请求默认使用get。

{
    // url 是用来请求的服务器的URL
    url: '/user',

    // method 是创建请求时用的方法，默认值是 get 
    method: 'get',

    // baseURL 将自动加在 url 前面， 除非 url 是一个绝对 url
    // 可以通过设置一个 baseURL 便于为 axios 实例的方法传递相对 url 
    baseURL: 'https://some-domain.com/api/',

    // transformRequest 允许在向服务器发送前， 修改请求数据
    // 只能用于 PUT 、 POST 、 PATCH 这几个请求方法
    // 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData，或 Stream
    // 可以修改请求头
    transformRequest: [function (data, headers) {
        // 对发送的 data 进行任意转换处理
        return data;
    }]，

    // transformResponse 在传递给 then/catch 前， 允许修改响应数据
    transformResponse: [function (data) {
        // 对接收的 data 进行任意转换处理
        return data;
    }],

    // 自定义请求头
    headers: {'X-Requested-With': 'XMLHttpRequest'},

    // params 是与请求一起发送的 URL 参数
    // 必须是一个简单对象或 URLSearchParams 对象
    params: {
        ID: 12345
    },

    // `paramsSerializer`是可选方法，主要用于序列化`params`
    // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)
    paramsSerializer: function (params) {
        return Qs.stringify(params, {arrayFormat: 'brackets'})
    },

    // `data` 是作为请求体被发送的数据
    // 仅适用 'PUT', 'POST', 'DELETE 和 'PATCH' 请求方法
    // 在没有设置 `transformRequest` 时，则必须是以下类型之一:
    // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams
    // - 浏览器专属: FormData, File, Blob
    // - Node 专属: Stream, Buffer
    data: {
        firstName: 'Fred'
    },
  
    // 发送请求体数据的可选语法
    // 请求方式 post
    // 只有 value 会被发送，key 则不会
    data: 'Country=Brasil&City=Belo Horizonte',

    // `timeout` 指定请求超时的毫秒数。
    // 如果请求时间超过 `timeout` 的值，则请求会被中断
    timeout: 1000, // 默认值是 `0` (永不超时)

    // `withCredentials` 表示跨域请求时是否需要使用凭证
    withCredentials: false, // default

    // `proxy` 定义了代理服务器的主机名，端口和协议。
    // 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。
    // 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。
    // `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。
    // 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。
    // 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`
    proxy: {
        protocol: 'https',
        host: '127.0.0.1',
        port: 9000,
        auth: {
            username: 'mikeymike',
            password: 'rapunz3l'
        }
    },
}