调度动作
将操作发送到 Store
假设保存后，需要发送一些操作来通知 store 已成功获取，怎么做？

eg：
    import { takeEvery } from 'redux-saga/effects'
    import Api from './path/to/api'

    function* watchFetchProducts() {
        yield takeEvery('PRODUCTS_REQUESTED', fetchProducts)
    }

    function* fetchProducts() {
        // Api.fetch('/products')触发 AJAX 请求并返回 Promise，该 Promise 将使用已解析的响应进行解析，AJAX 请求将立即执行。
        // const products = yield Api.fetch('/products')  // 在 generator 函数中， 任何位于右侧的 yield表达式都会被求值，然后将结果返回给调用者（即后面的中间件）。
        const products = yield call(Api.fetch, '/products') // 与上面的不同的是，我们不会立即执行 fetch 调用，而是 call 创建一个 effect 的描述。 使用 apply 替换 call 也可以
        console.log(products)
    }



1.可以将 store 的 dispatch 函数传递给 generator 函数，然后 generator 函数可以在收到 fetch 响应后调用它。

    function* fetchProducts() {
        const products = yield call(Api.fetch, '/products') 
        dispatch({type: 'PRODUCTS_REQUESTED', products}) // 此解决方案与直接从 Generator 内部调用函数具有相同的缺点（在【2.声明式效果中】进行了总结）。需要对dispatch进行模拟
    }

2.用 put 创建 effects。

    function* fetchProducts() {
        const products = yield call(Api.fetch, '/products')
        // create and yield a dispatch Effect
        yield put({ type: 'PRODUCTS_RECEIVED', products })
    }



eg:
    import { call, put } from 'redux-saga/effects'
    import Api from '...'

    const iterator = fetchProducts()

    // expects a call instruction 对Api.fetch的测试
    assert.deepEqual(
        iterator.next().value,
        call(Api.fetch, '/products'),
        "fetchProducts should yield an Effect call(Api.fetch, './products')"
    )

    // create a fake response 创建一个虚假的response
    const products = {}

    // expects a dispatch instruction 对dispatch的测试
    assert.deepEqual(
        iterator.next(products).value,
        put({ type: 'PRODUCTS_RECEIVED', products }),
        "fetchProducts should yield an Effect put({ type: 'PRODUCTS_RECEIVED', products })"
    )

